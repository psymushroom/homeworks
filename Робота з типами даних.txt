'number' + 3 + 3 // Результат:'number33'. Відбувається конкатенація, числа, з’єднані з рядком, перетворюються в рядок, а не кількість;

null + 3 // Результат: 3. Відбувається перетворення типів, null перетворюється в число, в результаті відбувається звичайне додавання 0 + 3;

5 && "qwerty"  // Результат: "qwerty". Логічний оператор && (AND) повертає останній операнд true, якщо обидва операнди мають true значення. В нашому випадку 5 та "qwerty" обидва мають значення true.

+'40' + +'2' + "hillel"; // Результат: "42hillel". Знак "+" перед '40' та '2' - це унарний плюс, який призводить ці строки в числа, тому спочатку відбувається додавання (40 + 2), а вже потім відбувається конкатенація зі строкою "hillel";

'10' - 5 === 6; // Результат false. Спочатку відбувається перетворення типів, строка '10' стає числом, далі відбувається віднімання, 10 - 5 = 5. Далі маємо оператор строгої рівності ===. За типом 5 та 6 однакові, але 5 менше 6, тому маємо false. 

true + false // Результат 1. Відбувається перетворення типів, true перетворюється в 1, а false в 0, в результаті відбувається додавання 1 + 0;

'4px' - 3 // Результат NaN. Javascript при виконанні аріфметичних операцій намагається перетворити операнди в числа, але оскільки '4рх' не є числовим значенням і віднімання неможливе, тому повертається NaN (not a number);

'4' - 3 // Результат 1. Відбувається перетворення строки '4' в число, далі відбувається віднімання;

'6' + 3 ** 0; // Результат '61'. Спочатку виконується правоасоціативна операція, тобто 3 зводиться в нульовий ступінь. Будь-яке число в нульовому ступіні дорівнює одиниці. Далі маємо конкатенацію зі строкою '6';

12 / '6' // Результат 2. Строка '6' перетворюється на число и маємо в результаті поділ 12/6;

'10' + (5 === 6); // Результат '10false'. Оскільки '10' є строкою, а не числом, то в результаті додавання буде відбуватися конкатенація із результатом в дужках (5 === 6 (оператор строгої рівності ===, 5 менше 6, результат false));

null == '' // Результат false. Оператор рівності == при виконанні враховує автоматичне приведення типів, тому маємо перетворення null в строку. За значенням 'null' і '' будут нерівними, тому результат false;

3 ** (9 / 3) // Результат 27. Спочатку маємо зведення в ступінь 3 за допомогою оператора ** і другу операцію поділу в дужках (9 / 3), що буде виконуватися окремо і дорівнює 3. 3 в 3 ступені буде 27; 

!!'false' == !!'true' // Результат true. Булевий оператор ! інвертує булеві значення на протилежне. Строка 'false' перетворюється в булеве значення true, оскільки строка не порожня, після першого ! інвертується в false, а після другого ! в true, теж саме відбувається зі строкою 'true', в результаті буде true == true;

0 || '0' && 1 // Результат 1. В виразі маємо два логічних оператори || (АБО) та && (І). За приоритетом спочатку виконується вираз з оператором &&, тобто '0' && 1. Оператор && повертає останній операнд, якщо обидва мають true значення. В нашому випадку '0' буде true, оскільки це не порожня строка і 1, який теж буде true, тому в результаті нам повернеться 1. Далі вже маємо вираз 0 || 1. Логічний оператор || повертає true, якщо хоча б один з операндів є true. 0 буде false, 1 будет true, тому повернеться 1.

(+null == false) < 1; // Результат false. Розберемо частину виразу (+null == false): +null за допомогою унарного плюса перетвоюється на число 0. Далі маємо оператор рівності ==, при виконанні якого відбудеться приведення типів, 0 стає false. В результаты маємо false == false, що буде true. Маємо вираз true < 1, true перетворюється в число 1, кінцевий результат 1 < 1, що буде false;

false && true || true // Результат true. Оператор && повертає true значення, якщо обидва є true, ми маємо false && true, є один false, тому повертається false. Далі вже маємо false || true. Оператор || повертає true, якщо хоча б один з операндів є true, тому результат буде true;

false && (false || true); // Результат false. Спочатку розберемо частину виразу (false || true), результат буде true, оператор || повертає true, якщо хоча б один з операндів є true. Далі маємо false && true. Оператор && повертає true значення, якщо обидва є true, є один false, тому результат буде false.

(+null == false) < 1 ** 5; // Результат false. Перша частина виразу (+null == false): +null за допомогою унарного плюса перетвоюється на число 0. Далі маємо оператор рівності ==, при виконанні якого відбудеться приведення типів, 0 стає false. В результаты маємо false == false, що буде true. Друга частина виразу 1 ** 5, тобто зведення одиниці в 5 ступені. Одиниця в будь-якому ступені буде дорівнювати 1. Маємо вираз true < 1, true перетворюється в число 1, кінцевий результат 1 < 1, що буде false.